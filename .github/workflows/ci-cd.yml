name: Spring Boot CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: springboot-postgres-app
  JAVA_VERSION: '17'
  MAVEN_OPTS: -Xmx1024m

jobs:
  # Job 1: Build and Install Dependencies
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: |
          cd bezkoder-app
          mvn clean install -DskipTests -B -V

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: spring-boot-jar
          path: bezkoder-app/target/*.jar
          retention-days: 1

  # Job 2: Security Scanning and Linting
  security-scan:
    name: Security Scan & Lint
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run OWASP Dependency Check
        run: |
          cd bezkoder-app
          mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=8 || true
        continue-on-error: true

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: bezkoder-app/target/dependency-check-report.*
          retention-days: 7

      - name: Maven Verify
        run: |
          cd bezkoder-app
          mvn verify -DskipTests -B

  # Job 3: Run Tests with PostgreSQL
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Unit and Integration Tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
        run: |
          cd bezkoder-app
          mvn test -B

      - name: Generate Test Coverage Report
        run: |
          cd bezkoder-app
          mvn jacoco:report || true
        continue-on-error: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: bezkoder-app/target/surefire-reports/
          retention-days: 7

  # Job 4: Build and Push Docker Image
  docker-build-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, security-scan, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./bezkoder-app
          file: ./bezkoder-app/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:buildcache,mode=max

      - name: Run Trivy Security Scanner on Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Docker Scout CVE Scan
        uses: docker/scout-action@v1
        if: always()
        with:
          command: cves
          image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          only-severities: critical,high
          exit-code: false
        continue-on-error: true

  # Job 5: Deploy (Verification & Notification)
  deploy:
    name: Deploy & Verify
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify Docker Image on Docker Hub
        run: |
          echo "üîç Verifying image push to Docker Hub..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker images | grep ${{ env.DOCKER_IMAGE_NAME }}
          echo "‚úÖ Image successfully verified on Docker Hub!"

      - name: Display Deployment Information
        run: |
          echo "=========================================="
          echo "üöÄ DEPLOYMENT SUCCESSFUL"
          echo "=========================================="
          echo "Docker Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "Build Date: $(date)"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Author: ${{ github.actor }}"
          echo "=========================================="
          echo ""
          echo "üì¶ Pull & Run Commands:"
          echo "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "docker run -d -p 8080:8080 --name springboot-app ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo ""
          echo "üê≥ Docker Compose Command:"
          echo "docker-compose up -d"
          echo "=========================================="

      - name: Create Deployment Summary
        run: |
          echo "## üéâ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Status**: Successful" >> $GITHUB_STEP_SUMMARY
          echo "üê≥ **Docker Image**: \`${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "üìù **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "üåø **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "üë§ **Deployed By**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Quick Start" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Job 6: Notification (Optional - runs on failure)
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [build, security-scan, test, docker-build-push, deploy]
    if: failure()

    steps:
      - name: Send Failure Notification
        run: |
          echo "=========================================="
          echo "‚ùå PIPELINE FAILED"
          echo "=========================================="
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "=========================================="
          echo "Please check the logs for more details."
          echo "=========================================="
